server {
	listen 80;
	listen 443 ssl;

	ssl_certificate /etc/ssl/certs/nginx.crt;
    ssl_certificate_key /etc/ssl/private/nginx.key;
    ssl_protocols TLSv1.3;

	root /var/www/html;

	index index.html;

	server_name jgravalo.42.fr;

	# error pages
	# error_page 400 index.html;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
		# No almacenar en caché
		# Evita que el navegador y proxies almacenen en caché el recurso.
		add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
		# Un encabezado más antiguo utilizado para evitar la caché en navegadores que lo soportan.
		add_header Pragma "no-cache";
		# Establece la fecha de caducidad en una fecha pasada, lo que obliga al navegador a considerar el recurso como expirado.
		add_header Expires 0;
		# Forzar siempre la revalidación. Desactiva los ETags para forzar al navegador a solicitar el recurso nuevamente en cada carga.
		etag off;
	}

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/run/php/php7.4-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
